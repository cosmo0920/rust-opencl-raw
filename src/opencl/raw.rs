#![allow(non_camel_case_types)]
/* automatically generated by rust-bindgen */

pub type __int128_t = ::libc::c_void;
pub type __uint128_t = ::libc::c_void;
pub type __builtin_va_list = [__va_list_tag; 1usize];
/* Hand written type alias */
pub type cl_int = i32;
pub type cl_uint = u32;
pub type cl_ulong = u64;
pub type size_t = u32;
pub type intptr_t = *mut i32;
/* end */
pub enum Struct__cl_platform_id { }
pub type cl_platform_id = *mut Struct__cl_platform_id;
pub enum Struct__cl_device_id { }
pub type cl_device_id = *mut Struct__cl_device_id;
pub enum Struct__cl_context { }
pub type cl_context = *mut Struct__cl_context;
pub enum Struct__cl_command_queue { }
pub type cl_command_queue = *mut Struct__cl_command_queue;
pub enum Struct__cl_mem { }
pub type cl_mem = *mut Struct__cl_mem;
pub enum Struct__cl_program { }
pub type cl_program = *mut Struct__cl_program;
pub enum Struct__cl_kernel { }
pub type cl_kernel = *mut Struct__cl_kernel;
pub enum Struct__cl_event { }
pub type cl_event = *mut Struct__cl_event;
pub enum Struct__cl_sampler { }
pub type cl_sampler = *mut Struct__cl_sampler;
pub type cl_bool = cl_uint;
pub type cl_bitfield = cl_ulong;
pub type cl_device_type = cl_bitfield;
pub type cl_platform_info = cl_uint;
pub type cl_device_info = cl_uint;
pub type cl_device_fp_config = cl_bitfield;
pub type cl_device_mem_cache_type = cl_uint;
pub type cl_device_local_mem_type = cl_uint;
pub type cl_device_exec_capabilities = cl_bitfield;
pub type cl_command_queue_properties = cl_bitfield;
pub type cl_device_partition_property = intptr_t;
pub type cl_device_affinity_domain = cl_bitfield;
pub type cl_context_properties = intptr_t;
pub type cl_context_info = cl_uint;
pub type cl_command_queue_info = cl_uint;
pub type cl_channel_order = cl_uint;
pub type cl_channel_type = cl_uint;
pub type cl_mem_flags = cl_bitfield;
pub type cl_mem_object_type = cl_uint;
pub type cl_mem_info = cl_uint;
pub type cl_mem_migration_flags = cl_bitfield;
pub type cl_image_info = cl_uint;
pub type cl_buffer_create_type = cl_uint;
pub type cl_addressing_mode = cl_uint;
pub type cl_filter_mode = cl_uint;
pub type cl_sampler_info = cl_uint;
pub type cl_map_flags = cl_bitfield;
pub type cl_program_info = cl_uint;
pub type cl_program_build_info = cl_uint;
pub type cl_program_binary_type = cl_uint;
pub type cl_build_status = cl_int;
pub type cl_kernel_info = cl_uint;
pub type cl_kernel_arg_info = cl_uint;
pub type cl_kernel_arg_address_qualifier = cl_uint;
pub type cl_kernel_arg_access_qualifier = cl_uint;
pub type cl_kernel_arg_type_qualifier = cl_bitfield;
pub type cl_kernel_work_group_info = cl_uint;
pub type cl_event_info = cl_uint;
pub type cl_command_type = cl_uint;
pub type cl_profiling_info = cl_uint;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__cl_image_format {
    pub image_channel_order: cl_channel_order,
    pub image_channel_data_type: cl_channel_type,
}
impl ::std::clone::Clone for Struct__cl_image_format {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__cl_image_format {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cl_image_format = Struct__cl_image_format;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__cl_image_desc {
    pub image_type: cl_mem_object_type,
    pub image_width: size_t,
    pub image_height: size_t,
    pub image_depth: size_t,
    pub image_array_size: size_t,
    pub image_row_pitch: size_t,
    pub image_slice_pitch: size_t,
    pub num_mip_levels: cl_uint,
    pub num_samples: cl_uint,
    pub buffer: cl_mem,
}
impl ::std::clone::Clone for Struct__cl_image_desc {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__cl_image_desc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cl_image_desc = Struct__cl_image_desc;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__cl_buffer_region {
    pub origin: size_t,
    pub size: size_t,
}
impl ::std::clone::Clone for Struct__cl_buffer_region {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__cl_buffer_region {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cl_buffer_region = Struct__cl_buffer_region;
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[link(name = "OpenCL")]
extern "C" {
    pub fn clGetPlatformIDs(arg1: cl_uint, arg2: *mut cl_platform_id,
                            arg3: *mut cl_uint) -> cl_int;
    pub fn clGetPlatformInfo(arg1: cl_platform_id, arg2: cl_platform_info,
                             arg3: size_t, arg4: *mut ::libc::c_void,
                             arg5: *mut size_t) -> cl_int;
    pub fn clGetDeviceIDs(arg1: cl_platform_id, arg2: cl_device_type,
                          arg3: cl_uint, arg4: *mut cl_device_id,
                          arg5: *mut cl_uint) -> cl_int;
    pub fn clGetDeviceInfo(arg1: cl_device_id, arg2: cl_device_info,
                           arg3: size_t, arg4: *mut ::libc::c_void,
                           arg5: *mut size_t) -> cl_int;
    pub fn clCreateSubDevices(arg1: cl_device_id,
                              arg2: *const cl_device_partition_property,
                              arg3: cl_uint, arg4: *mut cl_device_id,
                              arg5: *mut cl_uint) -> cl_int;
    pub fn clRetainDevice(arg1: cl_device_id) -> cl_int;
    pub fn clReleaseDevice(arg1: cl_device_id) -> cl_int;
    pub fn clCreateContext(arg1: *const cl_context_properties, arg2: cl_uint,
                           arg3: *const cl_device_id,
                           arg4:
                               ::std::option::Option<extern "C" fn(arg1:
                                                                       *const ::libc::c_char,
                                                                   arg2:
                                                                       *const ::libc::c_void,
                                                                   arg3:
                                                                       size_t,
                                                                   arg4:
                                                                       *mut ::libc::c_void)
                                                         -> ()>,
                           arg5: *mut ::libc::c_void, arg6: *mut cl_int)
     -> cl_context;
    pub fn clCreateContextFromType(arg1: *const cl_context_properties,
                                   arg2: cl_device_type,
                                   arg3:
                                       ::std::option::Option<extern "C" fn(arg1:
                                                                               *const ::libc::c_char,
                                                                           arg2:
                                                                               *const ::libc::c_void,
                                                                           arg3:
                                                                               size_t,
                                                                           arg4:
                                                                               *mut ::libc::c_void)
                                                                 -> ()>,
                                   arg4: *mut ::libc::c_void,
                                   arg5: *mut cl_int) -> cl_context;
    pub fn clRetainContext(arg1: cl_context) -> cl_int;
    pub fn clReleaseContext(arg1: cl_context) -> cl_int;
    pub fn clGetContextInfo(arg1: cl_context, arg2: cl_context_info,
                            arg3: size_t, arg4: *mut ::libc::c_void,
                            arg5: *mut size_t) -> cl_int;
    pub fn clCreateCommandQueue(arg1: cl_context, arg2: cl_device_id,
                                arg3: cl_command_queue_properties,
                                arg4: *mut cl_int) -> cl_command_queue;
    pub fn clRetainCommandQueue(arg1: cl_command_queue) -> cl_int;
    pub fn clReleaseCommandQueue(arg1: cl_command_queue) -> cl_int;
    pub fn clGetCommandQueueInfo(arg1: cl_command_queue,
                                 arg2: cl_command_queue_info, arg3: size_t,
                                 arg4: *mut ::libc::c_void, arg5: *mut size_t)
     -> cl_int;
    pub fn clCreateBuffer(arg1: cl_context, arg2: cl_mem_flags, arg3: size_t,
                          arg4: *mut ::libc::c_void, arg5: *mut cl_int)
     -> cl_mem;
    pub fn clCreateSubBuffer(arg1: cl_mem, arg2: cl_mem_flags,
                             arg3: cl_buffer_create_type,
                             arg4: *const ::libc::c_void, arg5: *mut cl_int)
     -> cl_mem;
    pub fn clCreateImage(arg1: cl_context, arg2: cl_mem_flags,
                         arg3: *const cl_image_format,
                         arg4: *const cl_image_desc,
                         arg5: *mut ::libc::c_void, arg6: *mut cl_int)
     -> cl_mem;
    pub fn clRetainMemObject(arg1: cl_mem) -> cl_int;
    pub fn clReleaseMemObject(arg1: cl_mem) -> cl_int;
    pub fn clGetSupportedImageFormats(arg1: cl_context, arg2: cl_mem_flags,
                                      arg3: cl_mem_object_type, arg4: cl_uint,
                                      arg5: *mut cl_image_format,
                                      arg6: *mut cl_uint) -> cl_int;
    pub fn clGetMemObjectInfo(arg1: cl_mem, arg2: cl_mem_info, arg3: size_t,
                              arg4: *mut ::libc::c_void, arg5: *mut size_t)
     -> cl_int;
    pub fn clGetImageInfo(arg1: cl_mem, arg2: cl_image_info, arg3: size_t,
                          arg4: *mut ::libc::c_void, arg5: *mut size_t)
     -> cl_int;
    pub fn clSetMemObjectDestructorCallback(arg1: cl_mem,
                                            arg2:
                                                ::std::option::Option<extern "C" fn(arg1:
                                                                                        cl_mem,
                                                                                    arg2:
                                                                                        *mut ::libc::c_void)
                                                                          ->
                                                                              ()>,
                                            arg3: *mut ::libc::c_void)
     -> cl_int;
    pub fn clCreateSampler(arg1: cl_context, arg2: cl_bool,
                           arg3: cl_addressing_mode, arg4: cl_filter_mode,
                           arg5: *mut cl_int) -> cl_sampler;
    pub fn clRetainSampler(arg1: cl_sampler) -> cl_int;
    pub fn clReleaseSampler(arg1: cl_sampler) -> cl_int;
    pub fn clGetSamplerInfo(arg1: cl_sampler, arg2: cl_sampler_info,
                            arg3: size_t, arg4: *mut ::libc::c_void,
                            arg5: *mut size_t) -> cl_int;
    pub fn clCreateProgramWithSource(arg1: cl_context, arg2: cl_uint,
                                     arg3: *mut *const ::libc::c_char,
                                     arg4: *const size_t, arg5: *mut cl_int)
     -> cl_program;
    pub fn clCreateProgramWithBinary(arg1: cl_context, arg2: cl_uint,
                                     arg3: *const cl_device_id,
                                     arg4: *const size_t,
                                     arg5: *mut *const ::libc::c_uchar,
                                     arg6: *mut cl_int, arg7: *mut cl_int)
     -> cl_program;
    pub fn clCreateProgramWithBuiltInKernels(arg1: cl_context, arg2: cl_uint,
                                             arg3: *const cl_device_id,
                                             arg4: *const ::libc::c_char,
                                             arg5: *mut cl_int) -> cl_program;
    pub fn clRetainProgram(arg1: cl_program) -> cl_int;
    pub fn clReleaseProgram(arg1: cl_program) -> cl_int;
    pub fn clBuildProgram(arg1: cl_program, arg2: cl_uint,
                          arg3: *const cl_device_id,
                          arg4: *const ::libc::c_char,
                          arg5:
                              ::std::option::Option<extern "C" fn(arg1:
                                                                      cl_program,
                                                                  arg2:
                                                                      *mut ::libc::c_void)
                                                        -> ()>,
                          arg6: *mut ::libc::c_void) -> cl_int;
    pub fn clCompileProgram(arg1: cl_program, arg2: cl_uint,
                            arg3: *const cl_device_id,
                            arg4: *const ::libc::c_char, arg5: cl_uint,
                            arg6: *const cl_program,
                            arg7: *mut *const ::libc::c_char,
                            arg8:
                                ::std::option::Option<extern "C" fn(arg1:
                                                                        cl_program,
                                                                    arg2:
                                                                        *mut ::libc::c_void)
                                                          -> ()>,
                            arg9: *mut ::libc::c_void) -> cl_int;
    pub fn clLinkProgram(arg1: cl_context, arg2: cl_uint,
                         arg3: *const cl_device_id,
                         arg4: *const ::libc::c_char, arg5: cl_uint,
                         arg6: *const cl_program,
                         arg7:
                             ::std::option::Option<extern "C" fn(arg1:
                                                                     cl_program,
                                                                 arg2:
                                                                     *mut ::libc::c_void)
                                                       -> ()>,
                         arg8: *mut ::libc::c_void, arg9: *mut cl_int)
     -> cl_program;
    pub fn clUnloadPlatformCompiler(arg1: cl_platform_id) -> cl_int;
    pub fn clGetProgramInfo(arg1: cl_program, arg2: cl_program_info,
                            arg3: size_t, arg4: *mut ::libc::c_void,
                            arg5: *mut size_t) -> cl_int;
    pub fn clGetProgramBuildInfo(arg1: cl_program, arg2: cl_device_id,
                                 arg3: cl_program_build_info, arg4: size_t,
                                 arg5: *mut ::libc::c_void, arg6: *mut size_t)
     -> cl_int;
    pub fn clCreateKernel(arg1: cl_program, arg2: *const ::libc::c_char,
                          arg3: *mut cl_int) -> cl_kernel;
    pub fn clCreateKernelsInProgram(arg1: cl_program, arg2: cl_uint,
                                    arg3: *mut cl_kernel, arg4: *mut cl_uint)
     -> cl_int;
    pub fn clRetainKernel(arg1: cl_kernel) -> cl_int;
    pub fn clReleaseKernel(arg1: cl_kernel) -> cl_int;
    pub fn clSetKernelArg(arg1: cl_kernel, arg2: cl_uint, arg3: size_t,
                          arg4: *const ::libc::c_void) -> cl_int;
    pub fn clGetKernelInfo(arg1: cl_kernel, arg2: cl_kernel_info,
                           arg3: size_t, arg4: *mut ::libc::c_void,
                           arg5: *mut size_t) -> cl_int;
    pub fn clGetKernelArgInfo(arg1: cl_kernel, arg2: cl_uint,
                              arg3: cl_kernel_arg_info, arg4: size_t,
                              arg5: *mut ::libc::c_void, arg6: *mut size_t)
     -> cl_int;
    pub fn clGetKernelWorkGroupInfo(arg1: cl_kernel, arg2: cl_device_id,
                                    arg3: cl_kernel_work_group_info,
                                    arg4: size_t, arg5: *mut ::libc::c_void,
                                    arg6: *mut size_t) -> cl_int;
    pub fn clWaitForEvents(arg1: cl_uint, arg2: *const cl_event) -> cl_int;
    pub fn clGetEventInfo(arg1: cl_event, arg2: cl_event_info, arg3: size_t,
                          arg4: *mut ::libc::c_void, arg5: *mut size_t)
     -> cl_int;
    pub fn clCreateUserEvent(arg1: cl_context, arg2: *mut cl_int) -> cl_event;
    pub fn clRetainEvent(arg1: cl_event) -> cl_int;
    pub fn clReleaseEvent(arg1: cl_event) -> cl_int;
    pub fn clSetUserEventStatus(arg1: cl_event, arg2: cl_int) -> cl_int;
    pub fn clSetEventCallback(arg1: cl_event, arg2: cl_int,
                              arg3:
                                  ::std::option::Option<extern "C" fn(arg1:
                                                                          cl_event,
                                                                      arg2:
                                                                          cl_int,
                                                                      arg3:
                                                                          *mut ::libc::c_void)
                                                            -> ()>,
                              arg4: *mut ::libc::c_void) -> cl_int;
    pub fn clGetEventProfilingInfo(arg1: cl_event, arg2: cl_profiling_info,
                                   arg3: size_t, arg4: *mut ::libc::c_void,
                                   arg5: *mut size_t) -> cl_int;
    pub fn clFlush(arg1: cl_command_queue) -> cl_int;
    pub fn clFinish(arg1: cl_command_queue) -> cl_int;
    pub fn clEnqueueReadBuffer(arg1: cl_command_queue, arg2: cl_mem,
                               arg3: cl_bool, arg4: size_t, arg5: size_t,
                               arg6: *mut ::libc::c_void, arg7: cl_uint,
                               arg8: *const cl_event, arg9: *mut cl_event)
     -> cl_int;
    pub fn clEnqueueReadBufferRect(arg1: cl_command_queue, arg2: cl_mem,
                                   arg3: cl_bool, arg4: *const size_t,
                                   arg5: *const size_t, arg6: *const size_t,
                                   arg7: size_t, arg8: size_t, arg9: size_t,
                                   arg10: size_t, arg11: *mut ::libc::c_void,
                                   arg12: cl_uint, arg13: *const cl_event,
                                   arg14: *mut cl_event) -> cl_int;
    pub fn clEnqueueWriteBuffer(arg1: cl_command_queue, arg2: cl_mem,
                                arg3: cl_bool, arg4: size_t, arg5: size_t,
                                arg6: *const ::libc::c_void, arg7: cl_uint,
                                arg8: *const cl_event, arg9: *mut cl_event)
     -> cl_int;
    pub fn clEnqueueWriteBufferRect(arg1: cl_command_queue, arg2: cl_mem,
                                    arg3: cl_bool, arg4: *const size_t,
                                    arg5: *const size_t, arg6: *const size_t,
                                    arg7: size_t, arg8: size_t, arg9: size_t,
                                    arg10: size_t,
                                    arg11: *const ::libc::c_void,
                                    arg12: cl_uint, arg13: *const cl_event,
                                    arg14: *mut cl_event) -> cl_int;
    pub fn clEnqueueFillBuffer(arg1: cl_command_queue, arg2: cl_mem,
                               arg3: *const ::libc::c_void, arg4: size_t,
                               arg5: size_t, arg6: size_t, arg7: cl_uint,
                               arg8: *const cl_event, arg9: *mut cl_event)
     -> cl_int;
    pub fn clEnqueueCopyBuffer(arg1: cl_command_queue, arg2: cl_mem,
                               arg3: cl_mem, arg4: size_t, arg5: size_t,
                               arg6: size_t, arg7: cl_uint,
                               arg8: *const cl_event, arg9: *mut cl_event)
     -> cl_int;
    pub fn clEnqueueCopyBufferRect(arg1: cl_command_queue, arg2: cl_mem,
                                   arg3: cl_mem, arg4: *const size_t,
                                   arg5: *const size_t, arg6: *const size_t,
                                   arg7: size_t, arg8: size_t, arg9: size_t,
                                   arg10: size_t, arg11: cl_uint,
                                   arg12: *const cl_event,
                                   arg13: *mut cl_event) -> cl_int;
    pub fn clEnqueueReadImage(arg1: cl_command_queue, arg2: cl_mem,
                              arg3: cl_bool, arg4: *const size_t,
                              arg5: *const size_t, arg6: size_t, arg7: size_t,
                              arg8: *mut ::libc::c_void, arg9: cl_uint,
                              arg10: *const cl_event, arg11: *mut cl_event)
     -> cl_int;
    pub fn clEnqueueWriteImage(arg1: cl_command_queue, arg2: cl_mem,
                               arg3: cl_bool, arg4: *const size_t,
                               arg5: *const size_t, arg6: size_t,
                               arg7: size_t, arg8: *const ::libc::c_void,
                               arg9: cl_uint, arg10: *const cl_event,
                               arg11: *mut cl_event) -> cl_int;
    pub fn clEnqueueFillImage(arg1: cl_command_queue, arg2: cl_mem,
                              arg3: *const ::libc::c_void,
                              arg4: *const size_t, arg5: *const size_t,
                              arg6: cl_uint, arg7: *const cl_event,
                              arg8: *mut cl_event) -> cl_int;
    pub fn clEnqueueCopyImage(arg1: cl_command_queue, arg2: cl_mem,
                              arg3: cl_mem, arg4: *const size_t,
                              arg5: *const size_t, arg6: *const size_t,
                              arg7: cl_uint, arg8: *const cl_event,
                              arg9: *mut cl_event) -> cl_int;
    pub fn clEnqueueCopyImageToBuffer(arg1: cl_command_queue, arg2: cl_mem,
                                      arg3: cl_mem, arg4: *const size_t,
                                      arg5: *const size_t, arg6: size_t,
                                      arg7: cl_uint, arg8: *const cl_event,
                                      arg9: *mut cl_event) -> cl_int;
    pub fn clEnqueueCopyBufferToImage(arg1: cl_command_queue, arg2: cl_mem,
                                      arg3: cl_mem, arg4: size_t,
                                      arg5: *const size_t,
                                      arg6: *const size_t, arg7: cl_uint,
                                      arg8: *const cl_event,
                                      arg9: *mut cl_event) -> cl_int;
    pub fn clEnqueueMapBuffer(arg1: cl_command_queue, arg2: cl_mem,
                              arg3: cl_bool, arg4: cl_map_flags, arg5: size_t,
                              arg6: size_t, arg7: cl_uint,
                              arg8: *const cl_event, arg9: *mut cl_event,
                              arg10: *mut cl_int) -> *mut ::libc::c_void;
    pub fn clEnqueueMapImage(arg1: cl_command_queue, arg2: cl_mem,
                             arg3: cl_bool, arg4: cl_map_flags,
                             arg5: *const size_t, arg6: *const size_t,
                             arg7: *mut size_t, arg8: *mut size_t,
                             arg9: cl_uint, arg10: *const cl_event,
                             arg11: *mut cl_event, arg12: *mut cl_int)
     -> *mut ::libc::c_void;
    pub fn clEnqueueUnmapMemObject(arg1: cl_command_queue, arg2: cl_mem,
                                   arg3: *mut ::libc::c_void, arg4: cl_uint,
                                   arg5: *const cl_event, arg6: *mut cl_event)
     -> cl_int;
    pub fn clEnqueueMigrateMemObjects(arg1: cl_command_queue, arg2: cl_uint,
                                      arg3: *const cl_mem,
                                      arg4: cl_mem_migration_flags,
                                      arg5: cl_uint, arg6: *const cl_event,
                                      arg7: *mut cl_event) -> cl_int;
    pub fn clEnqueueNDRangeKernel(arg1: cl_command_queue, arg2: cl_kernel,
                                  arg3: cl_uint, arg4: *const size_t,
                                  arg5: *const size_t, arg6: *const size_t,
                                  arg7: cl_uint, arg8: *const cl_event,
                                  arg9: *mut cl_event) -> cl_int;
    pub fn clEnqueueTask(arg1: cl_command_queue, arg2: cl_kernel,
                         arg3: cl_uint, arg4: *const cl_event,
                         arg5: *mut cl_event) -> cl_int;
    pub fn clEnqueueNativeKernel(arg1: cl_command_queue,
                                 arg2:
                                     ::std::option::Option<extern "C" fn(arg1:
                                                                             *mut ::libc::c_void)
                                                               -> ()>,
                                 arg3: *mut ::libc::c_void, arg4: size_t,
                                 arg5: cl_uint, arg6: *const cl_mem,
                                 arg7: *mut *const ::libc::c_void,
                                 arg8: cl_uint, arg9: *const cl_event,
                                 arg10: *mut cl_event) -> cl_int;
    pub fn clEnqueueMarkerWithWaitList(arg1: cl_command_queue, arg2: cl_uint,
                                       arg3: *const cl_event,
                                       arg4: *mut cl_event) -> cl_int;
    pub fn clEnqueueBarrierWithWaitList(arg1: cl_command_queue, arg2: cl_uint,
                                        arg3: *const cl_event,
                                        arg4: *mut cl_event) -> cl_int;
    pub fn clGetExtensionFunctionAddressForPlatform(arg1: cl_platform_id,
                                                    arg2:
                                                        *const ::libc::c_char)
     -> *mut ::libc::c_void;
    pub fn clCreateImage2D(arg1: cl_context, arg2: cl_mem_flags,
                           arg3: *const cl_image_format, arg4: size_t,
                           arg5: size_t, arg6: size_t,
                           arg7: *mut ::libc::c_void, arg8: *mut cl_int)
     -> cl_mem;
    pub fn clCreateImage3D(arg1: cl_context, arg2: cl_mem_flags,
                           arg3: *const cl_image_format, arg4: size_t,
                           arg5: size_t, arg6: size_t, arg7: size_t,
                           arg8: size_t, arg9: *mut ::libc::c_void,
                           arg10: *mut cl_int) -> cl_mem;
    pub fn clEnqueueMarker(arg1: cl_command_queue, arg2: *mut cl_event)
     -> cl_int;
    pub fn clEnqueueWaitForEvents(arg1: cl_command_queue, arg2: cl_uint,
                                  arg3: *const cl_event) -> cl_int;
    pub fn clEnqueueBarrier(arg1: cl_command_queue) -> cl_int;
    pub fn clUnloadCompiler() -> cl_int;
    pub fn clGetExtensionFunctionAddress(arg1: *const ::libc::c_char)
     -> *mut ::libc::c_void;
}
